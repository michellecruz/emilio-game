{"version":3,"sources":["Test.js","App.js","index.js"],"names":["camera","scene","renderer","canvas","geometry","texture","textureOpen","material","mesh","geometryKibble","textureKibble","materialKibble","meshKibble","meshKibble2","meshKibble3","meshKibble4","meshKibble5","Test","state","width","window","innerWidth","height","innerHeight","kibbleEaten","emilio","isEating","isTwirling","position","x","y","z","rotation","init","THREE","load","set","background","map","needsUpdate","add","kibble","antialias","setPixelRatio","devicePixelRatio","setSize","container","document","querySelector","emilioCanvas","replaceChild","domElement","getContext","setState","clientWidth","clientHeight","transparent","animate","requestAnimationFrame","addEventListener","event","keyCode","render","eatKibble","changePosition","sphereOne","sphereTwo","spheresIntersect","boundingSphere","emilioEating","visible","scale","setTimeout","sphere1","sphere1position","sphere2","sphere2position","v1","v2","dx","dy","Math","sqrt","distanceVector","radius","this","console","log","className","id","Component","App","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7ea292ad.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as THREE from 'three';\n\nlet camera, scene, renderer, canvas;\nlet geometry, texture, textureOpen, material, mesh;\nlet geometryKibble, textureKibble, materialKibble;\nlet meshKibble, meshKibble2, meshKibble3, meshKibble4, meshKibble5, meshKibble6;\n\nclass Test extends Component {\n  state = {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    kibbleEaten: 0,\n    emilio: {\n      isEating: false,\n      isTwirling: false,\n      position: {\n        x: -25,\n        y: 26,\n        z: 1,\n      },\n      rotation: {\n        x: 0.2,\n        y: 6.6,\n        z: 5,\n      },\n    }\n  }\n\n  init = () => {\n    // Load textures.\n    texture = new THREE.TextureLoader().load( 'img/milio4.jpg' );\n    textureOpen = new THREE.TextureLoader().load( 'img/milio4-open.jpg' );\n    \n    // Set up the initial scene\n    camera = new THREE.PerspectiveCamera( 1.8, window.innerWidth / window.innerHeight, 1, 1000 );\n    camera.position.set( 0, 5, 1000 );\n\n    scene = new THREE.Scene();\n    scene.background = new THREE.Color( 0xffffff );\n\n    // Draw Emilio shape & texture\n    geometry = new THREE.SphereBufferGeometry( 4.5, 32, 32 );\n    material = new THREE.MeshBasicMaterial( { map: texture } );\n    mesh = new THREE.Mesh( geometry, material );\n\n    // Emilio's initial position\n    mesh.position.x = this.state.emilio.position.x\n    mesh.position.y = this.state.emilio.position.y\n    mesh.position.z = this.state.emilio.position.z\n\n    // Emilio's initial rotation\n    mesh.rotation.x = this.state.emilio.rotation.x\n    mesh.rotation.y = this.state.emilio.rotation.y\n    mesh.rotation.z = this.state.emilio.rotation.z\n\n    // Needed in order to update Emilio's texture\n    mesh.material.map.needsUpdate = true;\n\n    // Add Emilio to the scene\n    scene.add( mesh );\n  \n    // Scatter the treats!\n    this.kibble();\n\n    // Draw the canvas and append to the dom\n    renderer = new THREE.WebGLRenderer( { antialias: true } );\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize( this.state.width, this.state.height );\n\n    let container = document.querySelector('.container'),\n        emilioCanvas = document.querySelector('.emiliocanvas');\n        \n    container.replaceChild( renderer.domElement, emilioCanvas );\n\n    canvas = renderer.getContext('2d').canvas;\n\n    this.setState({\n      width: canvas.clientWidth,\n      height: canvas.clientHeight,\n    })\n  }\n\n  kibble = () => {\n    geometryKibble = new THREE.SphereBufferGeometry( 2, 32, 32 );\n    textureKibble = new THREE.TextureLoader().load( 'img/kibble.png' );\n    materialKibble = new THREE.MeshBasicMaterial( { map: textureKibble, transparent: true } );\n\n    meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n    meshKibble.rotation.y = 10\n    meshKibble.position.x = 15\n    meshKibble.position.y = 10\n    meshKibble.position.z = 8\n    scene.add( meshKibble );\n\n    meshKibble2 = new THREE.Mesh( geometryKibble, materialKibble );\n    meshKibble2.rotation.y = 10\n    meshKibble2.position.x = 85\n    meshKibble2.position.y = 15\n    meshKibble2.position.z = 8\n    scene.add( meshKibble2 );\n\n    meshKibble3 = new THREE.Mesh( geometryKibble, materialKibble );\n    meshKibble3.rotation.y = 10\n    meshKibble3.position.x = 185\n    meshKibble3.position.y = 5\n    meshKibble3.position.z = 8\n    scene.add( meshKibble3 );\n\n    meshKibble4 = new THREE.Mesh( geometryKibble, materialKibble );\n    meshKibble4.rotation.y = 10\n    meshKibble4.position.x = 285\n    meshKibble4.position.y = 20\n    meshKibble4.position.z = 8\n    scene.add( meshKibble4 );\n\n    meshKibble5 = new THREE.Mesh( geometryKibble, materialKibble );\n    meshKibble5.rotation.y = 10\n    meshKibble5.position.x = 330\n    meshKibble5.position.y = 8\n    meshKibble5.position.z = 8\n    scene.add( meshKibble5 );\n  }\n\n  animate = () => {\n    requestAnimationFrame(this.animate);\n\n    mesh.position.x += 0.2;\n\n    if (mesh.position.y > 0) {\n      mesh.position.x += 0.3;\n      mesh.position.y -= 0.2;\n\n      mesh.rotation.z += 0.01 * (mesh.position.y * 0.9);\n    } else {\n      mesh.rotation.z -= 0.05\n    }\n\n    if (mesh.position.x > 0) {\n      camera.position.x = mesh.position.x;\n    }\n\n    document.addEventListener('keydown', event => {\n      if (event.keyCode === 84) {\n        mesh.rotation.z = -1.5\n        // mesh.rotation.x = -0.01\n        mesh.rotation.y = -3.3\n        mesh.rotation.y += 0.05\n      }\n    })\n\n    renderer.render( scene, camera );\n\n    if (mesh.position.y <= 0 && !this.state.emilio.isEating) {\n      mesh.material.map = texture;\n    }\n\n    this.eatKibble(meshKibble5, mesh);\n    this.eatKibble(meshKibble4, mesh);\n    this.eatKibble(meshKibble3, mesh);\n    this.eatKibble(meshKibble2, mesh);\n    this.eatKibble(meshKibble, mesh);\n  }\n\n  changePosition = () => {\n    mesh.position.y += 5;\n    if (mesh.position.y > 0) {\n      mesh.position.y += 2 * -(mesh.position.y * 0.01);\n      mesh.material.map = textureOpen;\n    }\n  }\n\n  eatKibble = (sphereOne, sphereTwo) => {\n    let emilioEats = this.spheresIntersect(\n        sphereOne.geometry.boundingSphere,\n        sphereOne.position,\n        sphereTwo.geometry.boundingSphere,\n        sphereTwo.position,\n      );\n\n    if (emilioEats) {\n      this.setState({\n        emilio: {\n          isEating: true\n        }\n      })\n    } else {\n      this.setState({\n        emilio: {\n          isEating: false\n        }\n      })\n    }\n\n    this.emilioEating(sphereOne, sphereTwo);\n  }\n\n  emilioEating = (sphereOne, sphereTwo) => {\n    if (this.state.emilio.isEating) {\n      sphereOne.visible = false;\n      sphereTwo.scale.set(sphereTwo.scale.x + 0.01, sphereTwo.scale.y + 0.01, sphereTwo.scale.z + 0.01);\n      sphereTwo.rotation.z = -1.5;\n  \n      this.setState({\n        kibbleEaten: this.state.kibbleEaten+1,\n      })\n\n      requestAnimationFrame(() => {\n          if (sphereTwo.material.map === texture) {\n            setTimeout(() => {\n              sphereTwo.material.map = textureOpen\n              sphereTwo.rotation.z += 0.02;\n\n              if (sphereTwo.material.map === textureOpen) {\n                setTimeout(() => {\n                  sphereTwo.material.map = texture\n                  sphereTwo.rotation.z -= 0.02;\n                }, 60);\n              }\n            }, 60);\n          } else {\n            setTimeout(() => {\n              sphereTwo.material.map = texture\n              sphereTwo.rotation.z += 0.02;\n            }, 60);\n          }\n        }\n      );\n    }\n  }\n\n  spheresIntersect = (sphere1, sphere1position, sphere2, sphere2position) => {\n    function distanceVector( v1, v2 ) {\n        var dx = v1.x - v2.x;\n        var dy = v1.y - v2.y;\n\n        return Math.sqrt( dx * dx + dy * dy );\n    }\n    return distanceVector(sphere1position, sphere2position) <= (sphere1.radius + sphere2.radius)\n  }\n\n  componentDidMount() {\n    this.init();\n    this.animate();\n\n    document.addEventListener('keydown', event => {\n      console.log(mesh.rotation.y)\n      if (event.keyCode === 32) {\n        requestAnimationFrame(this.changePosition);\n      }\n      // if (event.keyCode === 84) {\n      //   if (mesh.rotation.y !== 0) {\n      //     mesh.rotation.z = -1.5\n      //   }\n      // }\n    });\n\n    window.addEventListener('touchstart', this.changePosition);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"note\">press the spacebar or tap to jump</div>\n        <div id=\"count\" className={`${this.state.emilio.isEating ? 'active' : 'inactive'}`}>{ this.state.kibbleEaten }</div>\n        <div className=\"emiliocanvas\"></div>\n      </div>\n    );\n  }\n}\n\nexport default Test;\n","import React from 'react';\nimport Test from './Test';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Test />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}