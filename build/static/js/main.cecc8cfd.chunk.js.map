{"version":3,"sources":["firebase.js","EmilioGame.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","container","start","camera","scene","renderer","canvas","geometry","texture","textureOpen","material","mesh","geometryKibble","textureKibble","materialKibble","meshKibble","kibbleID","treatID","geometryTreat","textureTreat","materialTreat","meshTreat","raycaster","intersects","intersectsTreat","ghost","goal","temp","axis","axisTreat","shadowGroup","renderTarget","renderTargetBlur","shadowCamera","cameraHelper","depthMaterial","horizontalBlurMaterial","verticalBlurMaterial","plane","blurPlane","fillPlane","spheres","kibbleIDs","treatIDs","velocity","isTwirling","timeTwirling","isEating","isJumping","timeJumping","superPug","gameEnded","isTopFive","pause","PLANE_WIDTH","window","innerWidth","PLANE_HEIGHT","innerHeight","EmilioGame","state","timeElapsed","width","height","shadow","blur","darkness","opacity","color","emilio","position","x","y","z","rotation","kibbleEaten","totalKibble","length","playerName","topPlayers","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","playersRef","database","ref","player","score","time","ServerValue","TIMESTAMP","push","handleClick","document","querySelector","classList","add","mainContainer","game","removeChild","handleRefresh","location","reload","init","emilioCanvas","THREE","load","set","background","map","side","visible","addShadow","addKibble","antialias","setPixelRatio","devicePixelRatio","setSize","replaceChild","domElement","getContext","clientWidth","clientHeight","animate","requestAnimationFrame","scale","normalize","cross","DefaultUp","rotateOnAxis","setFromMatrixPosition","matrixWorld","lerp","lookAt","updateProjectionMatrix","initialBackground","overrideMaterial","setRenderTarget","render","blurShadow","eatKibble","jump","twirl","eat","endGame","generateMipmaps","planeGeometry","rotateX","Math","PI","planeMaterial","transparent","userData","onBeforeCompile","shader","uniforms","fragmentShader","replace","depthTest","depthWrite","HorizontalBlurShader","VerticalBlurShader","amount","tDiffuse","h","v","radius","i","abs","sin","random","computeBoundingSphere","intersectObjects","object","uuid","includes","intersectObject","rotateCamera","up","body","concat","sort","a","b","slice","cancelAnimationFrame","this","addEventListener","event","keyCode","currentPos","on","snapshot","players","val","newState","id","className","src","onSubmit","type","maxLength","placeholder","autoComplete","onChange","onClick","key","Component","App","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cecc8cfd.chunk.js","sourcesContent":["import firebase from 'firebase';\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC4sirCRU4mSEkVVlzOndsvwa9K50DM0gY\",\n  authDomain: \"emilio-game.firebaseapp.com\",\n  databaseURL: \"https://emilio-game.firebaseio.com\",\n  projectId: \"emilio-game\",\n  storageBucket: \"emilio-game.appspot.com\",\n  messagingSenderId: \"1095598874871\",\n  appId: \"1:1095598874871:web:e94bb6051fb85ebd83f3f2\",\n  measurementId: \"G-WVL1JPWRCJ\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport * as THREE from 'three';\nimport { HorizontalBlurShader } from 'three/examples/jsm/shaders/HorizontalBlurShader.js';\nimport { VerticalBlurShader } from 'three/examples/jsm/shaders/VerticalBlurShader.js';\n\nimport firebase from './firebase.js';\n\nlet container, start;\nlet camera, scene, renderer, canvas;\nlet geometry, texture, textureOpen, material, mesh;\n\nlet geometryKibble, textureKibble, materialKibble, meshKibble;\nlet spheres = [];\n\nlet kibbleIDs = [],\n    kibbleID,\n    treatIDs = [],\n    treatID;\n\nlet geometryTreat, textureTreat, materialTreat, meshTreat;\n\nlet radius = 100,\n    raycaster,\n    intersects,\n    intersectsTreat,\n    ghost,\n    goal,\n    temp,\n    axis,\n    axisTreat,\n    velocity = 1.4;\n\nlet isTwirling = false,\n    timeTwirling = 0,\n    isEating = false,\n    isJumping = false,\n    timeJumping = 0,\n    superPug = false,\n    gameEnded = false,\n    isTopFive = false;\n\nlet pause = false,\n    isMobile = false;\n\n// Shadow Variables\nlet shadowGroup,\n    renderTarget,\n    renderTargetBlur,\n    shadowCamera,\n    cameraHelper,\n    depthMaterial,\n    horizontalBlurMaterial,\n    verticalBlurMaterial,\n    plane,\n    blurPlane,\n    fillPlane,\n    PLANE_WIDTH = window.innerWidth * 4,\n    PLANE_HEIGHT = window.innerHeight * 4,\n    CAMERA_HEIGHT = 500;\n\n\nclass EmilioGame extends Component {\n  state = {\n    timeElapsed: 0,\n    width: window.innerWidth,\n    height: window.innerHeight,\n    shadow: {\n      blur: 3.5,\n      darkness: 1,\n      opacity: 1,\n    },\n    plane: {\n      color: '#ffffff',\n      opacity: 1,\n    },\n    emilio: {\n      isEating: false,\n      isTwirling: null,\n      position: {\n        x: -700,\n        y: 500,\n        z: 0,\n      },\n      rotation: {\n        x: 0, //-0.1,\n        y: 6.5, //6.6,\n        z: 0, //-1.2,\n      },\n    },\n    kibbleEaten: 0,\n    totalKibble: spheres.length,\n    playerName: '',\n    topPlayers: [],\n  }\n\n\n  // Form - Changing input\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n\n  // Form - Submit\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const playersRef = firebase.database().ref('players');\n    const player = {\n      name: this.state.playerName ? this.state.playerName : 'Anonymous',\n      score: this.state.kibbleEaten,\n      time: firebase.database.ServerValue.TIMESTAMP,\n    }\n    playersRef.push(player);\n    this.setState({\n      playerName: ''\n    });\n  }\n\n\n  // Form - Click, start screen\n  handleClick = () => {\n    document.querySelector('.form').classList.add('fade-out');\n    document.querySelector('.leaderboard').classList.add('fade-in');\n\n    let mainContainer = document.querySelector('.container'),\n        game = document.querySelector('.game')\n\n    mainContainer.removeChild(game)\n  }\n\n\n  // Refresh Page - TODO: Make component rerender\n  handleRefresh = () => {\n    window.location.reload();\n  }\n\n  init = () => {\n    let emilioCanvas = document.querySelector('.emiliocanvas');\n\n    // Load textures.\n    texture = new THREE.TextureLoader().load( 'img/060420-emilio-0.jpg' );\n    textureOpen = new THREE.TextureLoader().load( 'img/060420-emilio-1.jpg' );\n    textureKibble = new THREE.TextureLoader().load( 'img/kibble.jpg' );\n    textureTreat = new THREE.TextureLoader().load( 'img/treat.png' );\n    \n    // Set up the initial scene\n    camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 1, 10000 );\n    camera.position.set( 0, 400, 2000 );\n\n    scene = new THREE.Scene();\n    scene.background = new THREE.Color( 0xffffff )\n\n    // Draw Emilio shape & texture\n    geometry = new THREE.SphereBufferGeometry( radius, 32, 32 );\n    material = new THREE.MeshBasicMaterial( { map: texture } );\n    material.side = THREE.DoubleSide;\n    mesh = new THREE.Mesh( geometry, material );\n    mesh.name = \"Emilio\";\n\n    // Add a ghost for the camera to follow.\n    ghost = new THREE.Mesh( );\n    ghost.visible = false\n    goal = new THREE.Object3D();\n    ghost.add( goal );\n    temp = new THREE.Vector3();\n    goal.position.set( 0, 0, 2000 );\n\n    // Set Emilio's initial position\n    mesh.position.x = this.state.emilio.position.x\n    mesh.position.y = this.state.emilio.position.y\n    mesh.position.z = this.state.emilio.position.z\n\n    // Emilio's initial rotation\n    mesh.rotation.x = this.state.emilio.rotation.x\n    mesh.rotation.y = this.state.emilio.rotation.y\n    mesh.rotation.z = this.state.emilio.rotation.z\n\n    // Add Emilio to the scene\n    scene.add(mesh);\n    scene.add(ghost);\n  \n    // Add the shadow!\n    this.addShadow();\n\n    // Scatter the treats!\n    this.addKibble();\n    \n    raycaster = new THREE.Raycaster();\n\n    // Draw the canvas.\n    renderer = new THREE.WebGLRenderer( { antialias: true } );\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize( this.state.width, this.state.height );\n\n    // Replace div in the dom with new canvas.\n    container.replaceChild( renderer.domElement, emilioCanvas );\n    canvas = renderer.getContext('2d').canvas;\n\n    // Set width and height states to canvas width/height.\n    // Best not to keep calling window.InnerWidth/Height.\n    this.setState({\n      width: canvas.clientWidth,\n      height: canvas.clientHeight,\n    })\n  }\n\n\n  animate = () => {\n    // This creates the animation.\n    start = requestAnimationFrame(this.animate);\n\n    // Count seconds.\n    this.setState({\n      timeElapsed: this.state.timeElapsed + 1\n    })\n\n    // Make Emilio faster after he passes x kibbles\n    if (this.state.kibbleEaten >= 15 &&\n        this.state.kibbleEaten <= 100) {\n      mesh.position.x += 30;\n      velocity = 1.8\n    } else if (this.state.kibbleEaten > 100 &&\n        this.state.kibbleEaten <= 700) {\n      mesh.position.x += 40;\n      velocity = 2.2\n    } else if (this.state.kibbleEaten > 700) {\n      mesh.position.x += 60;\n      velocity = 2.6\n    } else {\n      mesh.position.x += 20;\n    }\n\n    // Ghost & Plane follows Emilio.\n    ghost.position.x = mesh.position.x;\n    ghost.position.y = mesh.position.y;\n    shadowGroup.position.x = mesh.position.x;\n\n    // If Emilio is in the air, move faster while falling to the ground.\n    if (superPug) {\n      if (mesh.scale.x < 3.5) {\n        mesh.scale.set(\n          mesh.scale.x + 0.1,\n          mesh.scale.y + 0.1,\n          mesh.scale.z + 0.1\n        );\n      } else {\n        mesh.scale.set(\n          3.5,\n          3.5,\n          3.5\n        );\n      }\n\n      if (mesh.position.y > 250) {\n        if (!isJumping) {\n          mesh.position.y -= 10\n        }\n      } else {\n        mesh.position.y = 250;\n      }\n    } else {\n      if (mesh.position.y > 10) {\n        if (!isJumping) {\n          mesh.position.y -= 10\n        }\n      } else {\n        mesh.position.y = 0;\n      }\n    }\n\n    // Rotate Emilio based on his direction\n    axis = new THREE.Vector3();\n    axis.set( mesh.position.x, mesh.position.y, 0 ).normalize();\n    axis.cross( THREE.Object3D.DefaultUp );\n    if (!gameEnded) {\n      mesh.rotateOnAxis( axis, -0.05*velocity );\n    }\n\n    axisTreat = new THREE.Vector3();\n    axisTreat.set( -0.5, -0.5, 0 ).normalize();\n    axisTreat.cross( THREE.Object3D.DefaultUp );\n    meshTreat.rotateOnAxis( axisTreat, -0.005*velocity );\n\n\n    // Have the camera follow Emilio.\n    temp.setFromMatrixPosition(goal.matrixWorld);\n    camera.position.lerp(temp, 0.8);\n    camera.lookAt( ghost.position );\n    camera.updateProjectionMatrix();\n\n\n    // SHADOW\n    // remove the background\n    let initialBackground = scene.background;\n    scene.background = null;\n\n    // force the depthMaterial to everything\n    cameraHelper.visible = false;\n    scene.overrideMaterial = depthMaterial;\n\n    // render to the render target to get the depths\n    renderer.setRenderTarget( renderTarget );\n    renderer.render( scene, shadowCamera );\n\n    // and reset the override material\n    scene.overrideMaterial = null;\n    cameraHelper.visible = true;\n\n    this.blurShadow( this.state.shadow.blur );\n\n    // a second pass to reduce the artifacts\n    // (0.4 is the minimum blur amout so that the artifacts are gone)\n    this.blurShadow( this.state.shadow.blur * 0.4 );\n\n    // reset and render the normal scene\n    renderer.setRenderTarget( null );\n    scene.background = initialBackground;\n\n    // If Emilio is on the ground and is not eating,\n    // close his mouth.\n    if (!isEating) {\n      mesh.material.map = texture;\n    }\n\n    // Start tracking if Emilio is eating kibble.\n    this.eatKibble();\n\n    // If Emilio is jumping, run this function. \n    if (isJumping) {\n      this.jump();\n    }\n\n    // This function contains logic for Emilio turning around.\n    if (isTwirling) {\n      timeTwirling += 1;\n    } else {\n      timeTwirling = 0;\n    }\n    this.twirl();\n\n    // If Emilio is eating, run this function.\n    if (isEating) {\n      this.eat();\n    }\n\n    if (mesh.position.x >= 165000) {\n      this.endGame();\n    }\n\n    // Render the screen.\n    renderer.render( scene, camera );\n    camera.updateProjectionMatrix();\n  }\n\n\n  addShadow = () => {\n    // the container, if you need to move the plane just move this\n    shadowGroup = new THREE.Group();\n    shadowGroup.position.y = -radius;\n\n    scene.add( shadowGroup );\n\n    // the render target that will show the shadows in the plane texture\n    renderTarget = new THREE.WebGLRenderTarget( 512, 512 );\n    renderTarget.texture.generateMipmaps = false;\n\n    // the render target that we will use to blur the first render target\n    renderTargetBlur = new THREE.WebGLRenderTarget( 512, 512 );\n    renderTargetBlur.texture.generateMipmaps = false;\n\n    // make a plane and make it face up\n    let planeGeometry = new THREE.PlaneBufferGeometry( PLANE_WIDTH, PLANE_HEIGHT ).rotateX( Math.PI / 2 );\n    let planeMaterial = new THREE.MeshBasicMaterial({\n      map: renderTarget.texture,\n      opacity: this.state.shadow.opacity,\n      transparent: true,\n    });\n\n    plane = new THREE.Mesh( planeGeometry, planeMaterial );\n    shadowGroup.add( plane );\n    // the y from the texture is flipped!\n    plane.scale.y = -1;\n\n    // the plane onto which to blur the texture\n    blurPlane = new THREE.Mesh( planeGeometry );\n    blurPlane.visible = false;\n    shadowGroup.add( blurPlane );\n\n    // the plane with the color of the ground\n    planeMaterial = new THREE.MeshBasicMaterial( {\n      color: this.state.plane.color,\n      opacity: this.state.plane.opacity,\n      transparent: true,\n    } );\n\n    fillPlane = new THREE.Mesh( planeGeometry, planeMaterial );\n    fillPlane.rotateX( Math.PI/2 );\n    shadowGroup.add( fillPlane );\n\n    // the camera to render the depth material from\n    shadowCamera = new THREE.OrthographicCamera( - PLANE_WIDTH / 2, PLANE_WIDTH / 2, PLANE_HEIGHT / 2, - PLANE_HEIGHT / 2, 0, CAMERA_HEIGHT );\n    shadowCamera.rotation.x = Math.PI / 2; // get the camera to look up\n    shadowGroup.add( shadowCamera );\n\n    cameraHelper = new THREE.CameraHelper( shadowCamera );\n\n    // like MeshDepthMaterial, but goes from black to transparent\n    depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.userData.darkness = { value: this.state.shadow.darkness };\n    depthMaterial.onBeforeCompile = function ( shader ) {\n      shader.uniforms.darkness = depthMaterial.userData.darkness;\n      shader.fragmentShader = `\n        uniform float darkness;\n        ${shader.fragmentShader.replace(\n      'gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );',\n      'gl_FragColor = vec4( vec3( 0.0 ), ( 1.0 - fragCoordZ ) * darkness );'\n    )}\n    `;\n    };\n    depthMaterial.depthTest = false;\n    depthMaterial.depthWrite = false;\n\n    horizontalBlurMaterial = new THREE.ShaderMaterial( HorizontalBlurShader );\n    horizontalBlurMaterial.depthTest = false;\n\n    verticalBlurMaterial = new THREE.ShaderMaterial( VerticalBlurShader );\n    verticalBlurMaterial.depthTest = false;\n  }\n\n\n  blurShadow = (amount) => {\n    blurPlane.visible = true;\n\n    // blur horizontally and draw in the renderTargetBlur\n    blurPlane.material = horizontalBlurMaterial;\n    blurPlane.material.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = amount * 1 / this.state.width*2; //256\n\n    renderer.setRenderTarget( renderTargetBlur );\n    renderer.render( blurPlane, shadowCamera );\n\n    // blur vertically and draw in the main renderTarget\n    blurPlane.material = verticalBlurMaterial;\n    blurPlane.material.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = amount * 1 / this.state.height*2; //256\n\n    renderer.setRenderTarget( renderTarget );\n    renderer.render( blurPlane, shadowCamera );\n\n    blurPlane.visible = false;\n  }\n\n\n  addKibble = () => {\n    // new THREE.BoxBufferGeometry( radius*2, radius*2, radius*2 );\n    geometryKibble = new THREE.CylinderBufferGeometry( radius, radius, radius*2, radius*2 ) //new THREE.SphereBufferGeometry( radius, 32, 32 );\n    materialKibble = new THREE.MeshBasicMaterial( { map: textureKibble } );\n    materialKibble.side = THREE.DoubleSide;\n\n\n    // Scatter kibble in specific patterns.\n    // Be sure not to go beyond the available area.\n\n    // First trail.\n    for (let i = 0; i < 5; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 100 + 400 * i\n      meshKibble.position.y = 0;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n      meshKibble.name = 'Kibble'\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    // First set of waves.\n    for (let i = 0; i < 50; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 2100 + 300 * i\n      meshKibble.position.y = Math.abs(Math.sin(0.25 * i) * (1000 - 0) + 0);\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n      meshKibble.name = 'Kibble'\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    // First diagonal line pointing up.\n    for (let i = 0; i < 10; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 17200 + i * 400;\n      meshKibble.position.y = 400 + 100 * i;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n      meshKibble.name = 'Kibble'\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n    \n    // Second diagonal line pointing up.\n    for (let i = 0; i < 10; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 21600 + i * 400;\n      meshKibble.position.y = 850 + 100 * i;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n      meshKibble.name = 'Kibble'\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    // Long straight line.\n    for (let i = 0; i < 50; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 26000 + 300 * i\n      meshKibble.position.y = 1850;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n      meshKibble.name = 'Kibble'\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    // Diagonal line pointing down.\n    for (let i = 0; i < 11; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 41000 + i * 400;\n      meshKibble.position.y = 1850 - 100 * i;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n      meshKibble.name = 'Kibble'\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    // Second set of waves.\n    for (let i = 0; i < 100; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 45600 + 400 * i\n      meshKibble.position.y = Math.abs(Math.sin(0.25 * i) * (1000 - 500) + 500);\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n      meshKibble.name = 'Kibble'\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    // SOMEWHERE HERE ADD SOMETHING TO MAKE EMILIO HUGE.\n    geometryTreat = new THREE.BoxBufferGeometry( radius*5, radius*5, radius*5 );\n    materialTreat = new THREE.MeshBasicMaterial( { map: textureTreat, transparent: true, } );\n    materialTreat.side = THREE.DoubleSide;\n    meshTreat = new THREE.Mesh( geometryTreat, materialTreat );\n    meshTreat.position.x = 85495;\n    meshTreat.position.y = Math.random() * (1700 - 500) + 500;\n    meshTreat.scale.set(\n      meshTreat.scale.x = meshTreat.scale.x * 0.8,\n      meshTreat.scale.y = meshTreat.scale.y * 0.8,\n      meshTreat.scale.z = meshTreat.scale.z * 0.8,\n    )\n    meshTreat.name = 'Treat'\n    scene.add( meshTreat );\n\n    // 1/3 Stacks of kibble.\n    for (let i = 0; i < 20; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 86000 + 200 * i\n      meshKibble.position.y = 100;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n      meshKibble.name = 'Kibble'\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    // 2/3 Stacks of kibble.\n    for (let i = 0; i < 20; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 86000 + 200 * i\n      meshKibble.position.y = 350;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n      meshKibble.name = 'Kibble'\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    // 3/3 Stacks of kibble.\n    for (let i = 0; i < 20; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 86000 + 200 * i\n      meshKibble.position.y = 600;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n      meshKibble.name = 'Kibble'\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    // Third set of waves.\n    for (let i = 0; i < 80; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 90400 + 400 * i\n      meshKibble.position.y = Math.abs(Math.sin(0.15 * i) * (600 - 0) + 0);\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n      meshKibble.name = 'Kibble'\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    // RANDOM!!!\n    for (var i = 0; i < 224; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = Math.random() * (160000 - 122800) + 122800;\n      meshKibble.position.y = Math.random() * (400 - 200) + 200;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n      meshKibble.name = 'Kibble'\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    this.setState({\n      totalKibble: spheres.length,\n    })\n  }\n  \n\n  eatKibble = () => {\n    // Use Raycaster to detect intersections.\n    if (superPug) {\n      raycaster.set(\n        new THREE.Vector3(mesh.position.x, mesh.position.y-250, 0), // origin\n        new THREE.Vector3(0, 250, 0).normalize(), // direction\n      )\n    } else {\n      raycaster.set(\n        mesh.position, // origin\n        new THREE.Vector3(-1, 1, 0), // direction\n      )\n    }\n\n    mesh.geometry.computeBoundingSphere();\n\n    intersects = raycaster.intersectObjects( spheres );\n    isEating = false\n\n    if (intersects.length > 0) {\n      isEating = true\n\n      kibbleID = intersects[0].object.uuid\n      if (!kibbleIDs.includes(kibbleID)) {\n        kibbleIDs.push( kibbleID )\n\n        this.setState({\n          emilio: {\n            isEating: true\n          },\n          kibbleEaten: this.state.kibbleEaten + 1,\n        })\n      }\n    } else {\n      isEating = false\n      this.setState({\n        emilio: {\n          isEating: false\n        }\n      })\n    }\n\n    intersectsTreat = raycaster.intersectObject( meshTreat );\n    if (intersectsTreat.length > 0) {\n      treatID = intersectsTreat[0].object.uuid\n\n      if (!treatIDs.includes(treatID)) {\n        treatIDs.push( treatID )\n\n        intersectsTreat[0].object.visible = false;\n        this.setState({\n          kibbleEaten: this.state.kibbleEaten + 50,\n        })\n\n        superPug = true\n      }\n    }\n\n    for ( let i = 0; i < intersects.length; i++ ) {\n      if (intersects.length > 0) {\n        if (intersects[i].object.name === 'Kibble') {\n          intersects[i].object.visible = false;\n        }\n      }\n    }\n  }\n\n\n  eat = () => {\n    if (!isTwirling) {\n      mesh.rotation.x = -0.2\n      mesh.rotation.y = 6.5\n      mesh.rotation.z = -1.2\n    }\n\n    mesh.material.map = textureOpen\n  }\n\n\n  twirl = () => {\n    switch (isTwirling) {\n      case true:\n        mesh.rotation.z = -1.2;\n        mesh.rotation.x = -0.1;\n        mesh.rotation.y = timeTwirling;\n\n        if (mesh.rotation.y >= 34) {\n          mesh.rotation.y = 34.4\n        }\n        break\n      case false:\n        mesh.rotation.x = 0;\n        mesh.rotation.y = 6.5\n        break\n      default:\n        return\n    }\n  }\n\n\n  jump = () => {\n    timeJumping += timeJumping + 1;\n    \n    if (timeJumping <= 150) {\n      if (mesh.position.y < 4000) {\n        mesh.position.y += 30 + Math.sin(timeJumping)*2;\n      }\n    } else {\n      isJumping = false;\n      timeJumping = 0;\n    }\n  }\n\n\n  rotateCamera = () => {\n    if (this.state.width < this.state.height) {\n      camera.up = new THREE.Vector3(-1,0,0);\n      goal.position.set( 0, 0, 3000 );\n      camera.updateProjectionMatrix();\n\n      document.body.classList.add('mobile');\n\n      isMobile = true;\n    }\n  }\n\n\n  endGame = () => {\n    superPug = true\n    gameEnded = true\n    mesh.position.x = 165000\n\n    let topFive = [].concat(this.state.topPlayers)\n          .sort((a, b) => b.score - a.score)\n          .slice(0, 5)\n          .map((player, i) => {\n            if (this.state.kibbleEaten >= player.score) {\n              isTopFive = true\n            }\n          })\n\n    if (topFive.length === 0) {\n      isTopFive = true\n    }\n\n    for (let i = 0; i > 10; i++) {\n      cancelAnimationFrame(start)\n    }\n  }\n\n\n  componentDidMount() {\n    container = document.querySelector('.game');\n\n    this.init();\n    this.animate();\n    this.rotateCamera();\n\n    document.addEventListener('keydown', event => {\n      //  Jump\n      if (event.keyCode === 32) {\n        isJumping = true;\n      }\n\n      // Tail\n      if (event.keyCode === 84) {\n        switch (isTwirling) {\n          case false:\n            isTwirling = true\n            break\n          case true:\n            isTwirling = false\n            break\n          default:\n            return;\n        }\n      }\n\n      // ArrowLeft -- Pause\n      if (event.keyCode === 37) {\n        let currentPos = mesh.position.x\n        mesh.position.lerp(\n          new THREE.Vector3(\n            currentPos-20000,\n            mesh.position.y,\n            0\n          ),\n        0.1)\n      }\n\n      // ArrowRight -- Go\n      if (event.keyCode === 39) {\n        let currentPos = mesh.position.x\n        mesh.position.lerp(\n          new THREE.Vector3(\n            currentPos+20000,\n            mesh.position.y,\n            0\n          ),\n        0.1)\n      }\n      \n      if (event.keyCode === 80) {\n        pause = pause ? false : true;\n        if (pause) {\n          cancelAnimationFrame(start)\n        } else {\n          requestAnimationFrame(this.animate)\n        }\n      }\n    });\n\n    window.addEventListener('touchstart', () => {\n      isJumping = true\n    });\n\n    const playersRef = firebase.database().ref('players');\n    playersRef.on('value', (snapshot) => {\n      let players = snapshot.val();\n      let newState = [];\n      for (let player in players) {\n        newState.push({\n          id: player,\n          name: players[player].name,\n          score: players[player].score,\n          time: players[player].time\n        });\n      }\n      this.setState({\n        topPlayers: newState\n      });\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        {isTopFive && (\n        <div className=\"form\">\n            <div className=\"form-wrapper\">\n              <h1>\n                WH<span className=\"butt-container\"><img src=\"img/butt.png\" className=\"image image-butt\"/></span>A\n\n                <span className=\"form-score\">\n                  { this.state.kibbleEaten }!\n                </span>\n              </h1>\n\n              <h2>You made it onto<br/>Emilio's leaderboard</h2>\n\n              <form onSubmit={this.handleSubmit}>\n                <input type=\"text\" maxLength=\"12\" name=\"playerName\" placeholder=\"Type your name\" autoComplete=\"off\" onChange={this.handleChange} value={this.state.playerName} />\n                <button onClick={this.handleClick}>Submit</button>\n              </form>\n            </div>\n          </div>\n        )}\n\n        {gameEnded && (\n        <div className={!isTopFive ? \"leaderboard fade-in\" : \"leaderboard\"}>\n          <div className=\"leaderboard-wrapper\">\n            <h1>T<span className=\"butt-container\"><img src=\"img/butt.png\" className=\"image image-butt\"/></span>P PLAYERS</h1>\n            {[].concat(this.state.topPlayers)\n            .sort((a, b) => b.time - a.time)\n            .sort((a, b) => b.score - a.score)\n            .slice(0, 5)\n            .map((player, i) => \n              <div className=\"player\" key={i}>\n                <div className=\"player-name\">\n                  <h2>{player.name}</h2>\n                </div>\n                <div className=\"player-score\">\n                  <h2>{player.score}</h2>\n                </div>\n              </div>\n            )}\n            <button onClick={this.handleRefresh}>Play Again</button>\n          </div>\n        </div>\n        )}\n\n        <div className=\"game\">\n          {/* {isMobile && (\n          <div className=\"pause\">Pause</div>\n          )} */}\n\n          <div className=\"note\">\n            <span className=\"desktop\">press the spacebar</span>\n            <span className=\"mobile-div\">tap to jump</span>\n          </div>\n\n          <div id=\"count\" className={`${this.state.emilio.isEating ? 'active' : ''}`}>\n            { this.state.kibbleEaten } / { this.state.totalKibble }\n          </div>\n\n          <div className=\"emiliocanvas\"></div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default EmilioGame;\n","import React from 'react';\nimport EmilioGame from './EmilioGame';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EmilioGame />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}