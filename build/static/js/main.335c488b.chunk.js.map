{"version":3,"sources":["Test.js","App.js","index.js"],"names":["camera","scene","renderer","canvas","geometry","texture","textureOpen","material","mesh","geometryKibble","textureKibble","materialKibble","meshKibble","kibbleID","raycaster","intersects","ghost","goal","temp","axis","shadowGroup","renderTarget","renderTargetBlur","shadowCamera","cameraHelper","depthMaterial","horizontalBlurMaterial","verticalBlurMaterial","plane","blurPlane","fillPlane","spheres","kibbleIDs","velocity","isTwirling","timeTwirling","isEating","isJumping","timeJumping","PLANE_WIDTH","window","innerWidth","PLANE_HEIGHT","innerHeight","CAMERA_HEIGHT","Test","state","timeElapsed","width","height","shadow","blur","darkness","opacity","color","kibbleEaten","totalKibble","length","emilio","position","x","y","z","rotation","init","container","document","querySelector","emilioCanvas","THREE","load","set","background","map","side","name","visible","add","addShadow","addKibble","antialias","setPixelRatio","devicePixelRatio","setSize","replaceChild","domElement","getContext","setState","clientWidth","clientHeight","animate","requestAnimationFrame","normalize","cross","DefaultUp","rotateOnAxis","setFromMatrixPosition","matrixWorld","lerp","lookAt","updateProjectionMatrix","initialBackground","overrideMaterial","setRenderTarget","render","blurShadow","eatKibble","jump","twirl","eat","generateMipmaps","planeGeometry","rotateX","Math","PI","planeMaterial","transparent","scale","userData","value","onBeforeCompile","shader","uniforms","fragmentShader","replace","depthTest","depthWrite","HorizontalBlurShader","VerticalBlurShader","amount","tDiffuse","h","v","radius","i","push","abs","sin","random","computeBoundingBox","intersectObjects","object","uuid","includes","rotateCamera","up","body","classList","this","addEventListener","event","keyCode","currentPos","lerpVectors","console","log","className","id","Component","App","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.335c488b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as THREE from 'three';\nimport { HorizontalBlurShader } from 'three/examples/jsm/shaders/HorizontalBlurShader.js';\nimport { VerticalBlurShader } from 'three/examples/jsm/shaders/VerticalBlurShader.js';\n\n// import * as firebase from 'firebase';\n\n\n\nlet camera, scene, renderer, canvas;\nlet geometry, texture, textureOpen, material, mesh;\n\nlet geometryKibble, textureKibble, materialKibble, meshKibble;\nlet spheres = [];\n\nlet kibbleIDs = [],\n    kibbleID;\n\nlet radius = 100,\n    raycaster,\n    intersects,\n    ghost,\n    goal,\n    temp,\n    axis,\n    velocity = 1.4;\n\nlet isTwirling = false,\n    timeTwirling = 0,\n    isEating = false,\n    isJumping = false,\n    timeJumping = 0;\n\n// Shadow Variables\nlet shadowGroup,\n    renderTarget,\n    renderTargetBlur,\n    shadowCamera,\n    cameraHelper,\n    depthMaterial,\n    horizontalBlurMaterial,\n    verticalBlurMaterial,\n    plane,\n    blurPlane,\n    fillPlane,\n    PLANE_WIDTH = window.innerWidth * 4,\n    PLANE_HEIGHT = window.innerHeight * 4,\n    CAMERA_HEIGHT = 500;\n\n\nclass Test extends Component {\n  state = {\n    timeElapsed: 0,\n    width: window.innerWidth,\n    height: window.innerHeight,\n    shadow: {\n      blur: 3.5,\n      darkness: 1,\n      opacity: 1,\n    },\n    plane: {\n      color: '#ffffff',\n      opacity: 1,\n    },\n    kibbleEaten: 0,\n    totalKibble: spheres.length,\n    emilio: {\n      isEating: false,\n      isTwirling: null,\n      position: {\n        x: -700,\n        y: 500,\n        z: 0,\n      },\n      rotation: {\n        x: 0, //-0.1,\n        y: 6.5, //6.6,\n        z: 0, //-1.2,\n      },\n    }\n  }\n\n\n  init = () => {\n    let container = document.querySelector( '.container'),\n        emilioCanvas = document.querySelector('.emiliocanvas');\n\n    // Load textures.\n    texture = new THREE.TextureLoader().load( 'img/060420-emilio-0.jpg' );\n    textureOpen = new THREE.TextureLoader().load( 'img/060420-emilio-1.jpg' );\n    textureKibble = new THREE.TextureLoader().load( 'img/kibble.jpg' );\n    \n    // Set up the initial scene\n    camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 1, 10000 );\n    camera.position.set( 0, 400, 2000 );\n\n    scene = new THREE.Scene();\n    scene.background = new THREE.Color( 0xffffff )\n\n    // Draw Emilio shape & texture\n    geometry = new THREE.SphereBufferGeometry( radius, 32, 32 );\n    material = new THREE.MeshBasicMaterial( { map: texture } );\n    material.side = THREE.DoubleSide;\n    mesh = new THREE.Mesh( geometry, material );\n    mesh.name = \"Emilio\";\n\n    // Add a ghost for the camera to follow.\n    ghost = new THREE.Mesh( );\n    ghost.visible = false\n    goal = new THREE.Object3D();\n    ghost.add( goal );\n    temp = new THREE.Vector3();\n    goal.position.set( 0, 0, 2000 );\n\n    // Set Emilio's initial position\n    mesh.position.x = this.state.emilio.position.x\n    mesh.position.y = this.state.emilio.position.y\n    mesh.position.z = this.state.emilio.position.z\n\n    // Emilio's initial rotation\n    mesh.rotation.x = this.state.emilio.rotation.x\n    mesh.rotation.y = this.state.emilio.rotation.y\n    mesh.rotation.z = this.state.emilio.rotation.z\n\n    // Needed in order to update Emilio's texture\n    // mesh.material.map.needsUpdate = true;\n\n    // Add Emilio to the scene\n    scene.add(mesh);\n    scene.add(ghost);\n  \n    // Add the shadow!\n    this.addShadow();\n\n    // Scatter the treats!\n    this.addKibble();\n    \n    raycaster = new THREE.Raycaster();\n\n    // Draw the canvas.\n    renderer = new THREE.WebGLRenderer( { antialias: true } );\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize( this.state.width, this.state.height );\n\n    // Replace div in the dom with new canvas.\n    container.replaceChild( renderer.domElement, emilioCanvas );\n    canvas = renderer.getContext('2d').canvas;\n\n    // Set width and height states to canvas width/height.\n    // Best not to keep calling window.InnerWidth/Height.\n    this.setState({\n      width: canvas.clientWidth,\n      height: canvas.clientHeight,\n    })\n  }\n\n\n  animate = () => {\n    // This creates the animation.\n    requestAnimationFrame(this.animate);\n\n    // Count seconds.\n    this.setState({\n      timeElapsed: this.state.timeElapsed + 1\n    })\n\n    // Physics/Gravity\n    // Make Emilio faster after he passes x kibbles\n    if (this.state.kibbleEaten >= 50 &&\n        this.state.kibbleEaten <= 100) {\n      mesh.position.x += 30;\n      velocity = 1.8\n    } else if (this.state.kibbleEaten > 100 &&\n        this.state.kibbleEaten <= 700) {\n      mesh.position.x += 40;\n      velocity = 2.2\n    } else if (this.state.kibbleEaten > 700) {\n      mesh.position.x += 60;\n      velocity = 2.6\n    } else {\n      mesh.position.x += 20;\n    }\n\n    // Ghost & Plane follows Emilio.\n    ghost.position.x = mesh.position.x;\n    ghost.position.y = mesh.position.y;\n    shadowGroup.position.x = mesh.position.x;\n\n    // If Emilio is in the air, move faster while falling to the ground.\n    if (mesh.position.y > 10) {\n      if (!isJumping) {\n        mesh.position.y -= 10\n      }\n    } else {\n      mesh.position.y = 0;\n    }\n\n    // Rotate Emilio based on his direction\n    axis = new THREE.Vector3();\n    // Axis orthogonal to forward vector\n    axis.set( mesh.position.x, mesh.position.y, 0 ).normalize();\n    axis.cross( THREE.Object3D.DefaultUp );\n    mesh.rotateOnAxis( axis, -0.05*velocity );\n\n\n    // Have the camera follow Emilio.\n    temp.setFromMatrixPosition(goal.matrixWorld);\n    camera.position.lerp(temp, 0.8);\n    camera.lookAt( ghost.position );\n    // camera.lookAt( ghost.position.x, ghost.position.y, spheres[1].position.z );\n    camera.updateProjectionMatrix();\n\n\n    // SHADOW\n    // remove the background\n    let initialBackground = scene.background;\n    scene.background = null;\n\n    // force the depthMaterial to everything\n    cameraHelper.visible = false;\n    scene.overrideMaterial = depthMaterial;\n\n    // render to the render target to get the depths\n    renderer.setRenderTarget( renderTarget );\n    renderer.render( scene, shadowCamera );\n\n    // and reset the override material\n    scene.overrideMaterial = null;\n    cameraHelper.visible = true;\n\n    this.blurShadow( this.state.shadow.blur );\n\n    // a second pass to reduce the artifacts\n    // (0.4 is the minimum blur amout so that the artifacts are gone)\n    this.blurShadow( this.state.shadow.blur * 0.4 );\n\n    // reset and render the normal scene\n    renderer.setRenderTarget( null );\n    scene.background = initialBackground;\n\n    // If Emilio is on the ground and is not eating,\n    // close his mouth.\n    if (mesh.position.y <= 0 && !isEating) {\n      mesh.material.map = texture;\n    }\n\n    // Start tracking if Emilio is eating kibble.\n    this.eatKibble();\n\n    // If Emilio is jumping, run this function. \n    if (isJumping) {\n      this.jump();\n    }\n\n    // This function contains logic for Emilio turning around.\n    if (isTwirling) {\n      timeTwirling += 1;\n    } else {\n      timeTwirling = 0;\n    }\n    this.twirl();\n\n    // If Emilio is eating, run this function.\n    if (isEating) {\n      this.eat();\n    }\n\n    // Render the screen.\n    renderer.render( scene, camera );\n    camera.updateProjectionMatrix();\n  }\n\n\n  addShadow = () => {\n    // the container, if you need to move the plane just move this\n    shadowGroup = new THREE.Group();\n    shadowGroup.position.y = -radius;\n\n    scene.add( shadowGroup );\n\n    // the render target that will show the shadows in the plane texture\n    renderTarget = new THREE.WebGLRenderTarget( 512, 512 );\n    renderTarget.texture.generateMipmaps = false;\n\n    // the render target that we will use to blur the first render target\n    renderTargetBlur = new THREE.WebGLRenderTarget( 512, 512 );\n    renderTargetBlur.texture.generateMipmaps = false;\n\n    // make a plane and make it face up\n    let planeGeometry = new THREE.PlaneBufferGeometry( PLANE_WIDTH, PLANE_HEIGHT ).rotateX( Math.PI / 2 );\n    let planeMaterial = new THREE.MeshBasicMaterial({\n      map: renderTarget.texture,\n      opacity: this.state.shadow.opacity,\n      transparent: true,\n    });\n\n    plane = new THREE.Mesh( planeGeometry, planeMaterial );\n    shadowGroup.add( plane );\n    // the y from the texture is flipped!\n    plane.scale.y = -1;\n\n    // the plane onto which to blur the texture\n    blurPlane = new THREE.Mesh( planeGeometry );\n    blurPlane.visible = false;\n    shadowGroup.add( blurPlane );\n\n    // the plane with the color of the ground\n    planeMaterial = new THREE.MeshBasicMaterial( {\n      color: this.state.plane.color,\n      opacity: this.state.plane.opacity,\n      transparent: true,\n    } );\n\n    fillPlane = new THREE.Mesh( planeGeometry, planeMaterial );\n    fillPlane.rotateX( Math.PI/2 );\n    shadowGroup.add( fillPlane );\n\n    // the camera to render the depth material from\n    shadowCamera = new THREE.OrthographicCamera( - PLANE_WIDTH / 2, PLANE_WIDTH / 2, PLANE_HEIGHT / 2, - PLANE_HEIGHT / 2, 0, CAMERA_HEIGHT );\n    shadowCamera.rotation.x = Math.PI / 2; // get the camera to look up\n    shadowGroup.add( shadowCamera );\n\n    cameraHelper = new THREE.CameraHelper( shadowCamera );\n\n    // like MeshDepthMaterial, but goes from black to transparent\n    depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.userData.darkness = { value: this.state.shadow.darkness };\n    depthMaterial.onBeforeCompile = function ( shader ) {\n      shader.uniforms.darkness = depthMaterial.userData.darkness;\n      shader.fragmentShader = `\n        uniform float darkness;\n        ${shader.fragmentShader.replace(\n      'gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );',\n      'gl_FragColor = vec4( vec3( 0.0 ), ( 1.0 - fragCoordZ ) * darkness );'\n    )}\n    `;\n    };\n    depthMaterial.depthTest = false;\n    depthMaterial.depthWrite = false;\n\n    horizontalBlurMaterial = new THREE.ShaderMaterial( HorizontalBlurShader );\n    horizontalBlurMaterial.depthTest = false;\n\n    verticalBlurMaterial = new THREE.ShaderMaterial( VerticalBlurShader );\n    verticalBlurMaterial.depthTest = false;\n  }\n\n\n  blurShadow = (amount) => {\n    blurPlane.visible = true;\n\n    // blur horizontally and draw in the renderTargetBlur\n    blurPlane.material = horizontalBlurMaterial;\n    blurPlane.material.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = amount * 1 / this.state.width*2; //256\n\n    renderer.setRenderTarget( renderTargetBlur );\n    renderer.render( blurPlane, shadowCamera );\n\n    // blur vertically and draw in the main renderTarget\n    blurPlane.material = verticalBlurMaterial;\n    blurPlane.material.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = amount * 1 / this.state.height*2; //256\n\n    renderer.setRenderTarget( renderTarget );\n    renderer.render( blurPlane, shadowCamera );\n\n    blurPlane.visible = false;\n  }\n\n\n  addKibble = () => {\n    // new THREE.BoxBufferGeometry( radius*2, radius*2, radius*2 );\n    geometryKibble = new THREE.CylinderBufferGeometry( radius, radius, radius*2, radius*2 ) //new THREE.SphereBufferGeometry( radius, 32, 32 );\n    materialKibble = new THREE.MeshBasicMaterial( { map: textureKibble } );\n    materialKibble.side = THREE.DoubleSide;\n\n\n    // Scatter 100 pieces of kibble in random positions\n    // Be sure not to go beyond the available area.\n    for (let i = 0; i < 5; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 100 + 400 * i\n      meshKibble.position.y = 0;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n        \n      meshKibble.name = 'Kibble'\n\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    for (let i = 0; i < 50; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 2100 + 300 * i\n      meshKibble.position.y = Math.abs(Math.sin(0.25 * i) * (1000 - 0) + 0);\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n        \n      meshKibble.name = 'Kibble'\n\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    for (let i = 0; i < 10; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 17200 + i * 400;\n      meshKibble.position.y = 400 + 100 * i;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n        \n      meshKibble.name = 'Kibble'\n\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n    \n    for (let i = 0; i < 10; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 21600 + i * 400;\n      meshKibble.position.y = 850 + 100 * i;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n        \n      meshKibble.name = 'Kibble'\n\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    for (let i = 0; i < 50; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 26000 + 300 * i\n      meshKibble.position.y = 1850;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n        \n      meshKibble.name = 'Kibble'\n\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    for (let i = 0; i < 11; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 41000 + i * 400;\n      meshKibble.position.y = 1850 - 100 * i;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n        \n      meshKibble.name = 'Kibble'\n\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    for (let i = 0; i < 100; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 45600 + 400 * i\n      meshKibble.position.y = Math.abs(Math.sin(0.25 * i) * (1000 - 500) + 500);\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n        \n      meshKibble.name = 'Kibble'\n\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    for (let i = 0; i < 2; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 85520;\n      meshKibble.position.y = 250 + 250 * i;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n        \n      meshKibble.name = 'Kibble'\n\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    for (let i = 0; i < 20; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 85800 + 200 * i\n      meshKibble.position.y = 100;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n        \n      meshKibble.name = 'Kibble'\n\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    for (let i = 0; i < 20; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 85800 + 200 * i\n      meshKibble.position.y = 350;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n        \n      meshKibble.name = 'Kibble'\n\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    for (let i = 0; i < 20; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 85800 + 200 * i\n      meshKibble.position.y = 600;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n        \n      meshKibble.name = 'Kibble'\n\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    for (let i = 0; i < 80; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = 89950 + 400 * i\n      meshKibble.position.y = Math.abs(Math.sin(0.25 * i) * (1000 - 500) + 500);\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n        \n      meshKibble.name = 'Kibble'\n\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    for (var i = 0; i < 222; i ++) {\n      meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n      meshKibble.rotation.x = mesh.rotation.x\n\n      meshKibble.rotation.y = mesh.rotation.y\n      meshKibble.rotation.z = mesh.rotation.z\n      meshKibble.position.x = Math.random() * (160000 - 122300) + 122300;\n      meshKibble.position.y = Math.random() * (400 - 200) + 200;\n      meshKibble.scale.set(\n        meshKibble.scale.x = meshKibble.scale.x * 0.8,\n        meshKibble.scale.y = meshKibble.scale.y * 0.8,\n        meshKibble.scale.z = meshKibble.scale.z * 0.8,\n      )\n        \n      meshKibble.name = 'Kibble'\n\n      scene.add( meshKibble );\n      spheres.push( meshKibble );\n    }\n\n    this.setState({\n      totalKibble: spheres.length,\n    })\n  }\n  \n\n  eatKibble = () => {\n    // Use Raycaster to detect intersections.\n    raycaster.set(\n      mesh.position, // origin\n      new THREE.Vector3(-1, 1, 0), // direction\n    )\n\n    mesh.geometry.computeBoundingBox();\n\n    intersects = raycaster.intersectObjects( spheres );\n    isEating = false\n\n    if (intersects.length > 0) {\n      isEating = true\n\n      kibbleID = intersects[0].object.uuid\n      if (!kibbleIDs.includes(kibbleID)) {\n        kibbleIDs.push( kibbleID )\n\n        this.setState({\n          emilio: {\n            isEating: true\n          },\n          kibbleEaten: this.state.kibbleEaten + 1,\n        })\n      }\n    } else {\n      isEating = false\n      this.setState({\n        emilio: {\n          isEating: false\n        }\n      })\n    }\n\n    for ( let i = 0; i < intersects.length; i++ ) {\n      if (intersects.length > 0) {\n        if (intersects[i].object.name === 'Kibble') {\n          intersects[i].object.visible = false;\n\n          // if (mesh.scale.x < 2) {\n          //   mesh.scale.set(\n          //     mesh.scale.x + 0.01,\n          //     mesh.scale.y + 0.01,\n          //     mesh.scale.z + 0.01\n          //   );\n          //   mesh.geometry.computeBoundingSphere()\n          // }\n        }\n      }\n    }\n  }\n\n\n  eat = () => {\n    if (!isTwirling) {\n      mesh.rotation.x = -0.2\n      mesh.rotation.y = 6.5\n      mesh.rotation.z = -1.2\n    }\n\n    mesh.material.map = textureOpen\n  }\n\n\n  twirl = () => {\n    switch (isTwirling) {\n      case true:\n        mesh.rotation.z = -1.2;\n        mesh.rotation.x = -0.1;\n        mesh.rotation.y = timeTwirling;\n\n        if (mesh.rotation.y >= 34) {\n          mesh.rotation.y = 34.4\n        }\n        break\n      case false:\n        mesh.rotation.x = 0;\n        mesh.rotation.y = 6.5\n        break\n      default:\n        return\n    }\n  }\n\n\n  jump = () => {\n    timeJumping += timeJumping + 1;\n    \n    if (timeJumping <= 150) {\n      if (mesh.position.y < 4000) {\n        mesh.position.y += 30 + Math.sin(timeJumping)*2;\n      }\n    } else {\n      isJumping = false;\n      timeJumping = 0;\n    }\n  }\n\n  rotateCamera = () => {\n    if (this.state.width < this.state.height) {\n      PLANE_HEIGHT = window.innerWidth * 4;\n      PLANE_WIDTH = window.innerHeight * 4;\n      CAMERA_HEIGHT = 500;\n\n      camera.up = new THREE.Vector3(-1,0,0);\n      camera.updateProjectionMatrix();\n\n      document.body.classList.add('mobile');\n    }\n  }\n\n\n  componentDidMount() {\n    this.init();\n    this.animate();\n    this.rotateCamera();\n\n    document.addEventListener('keydown', event => {\n      //  Jump\n      if (event.keyCode === 32) {\n        isJumping = true;\n      }\n\n      // Tail\n      if (event.keyCode === 84) {\n        switch (isTwirling) {\n          case false:\n            isTwirling = true\n            break\n          case true:\n            isTwirling = false\n            break\n          default:\n            return;\n        }\n      }\n\n      //  ArrowDown -- Go down\n      if (event.keyCode === 40) {\n        let currentPos = mesh.position\n        if (currentPos > 0) {\n          mesh.position.lerpVectors(\n            new THREE.Vector3( currentPos.x, currentPos.y, 0 ),\n            new THREE.Vector3( mesh.position.x, mesh.position.y-60, 0 ),\n          0.1)\n        }\n      }\n\n      // ArrowRight -- Go faster\n      if (event.keyCode === 39) {\n        let currentPos = mesh.position.x\n        mesh.position.lerp(\n          new THREE.Vector3(\n            currentPos+5000,\n            mesh.position.y,\n            0\n          ),\n        0.1)\n        console.log(currentPos)\n      }\n    });\n\n    window.addEventListener('touchstart', () => {\n      isJumping = true\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"note\"><span className=\"desktop\">press the spacebar</span><span className=\"mobile-div\">tap to jump</span></div>\n        <div id=\"count\" className={`${this.state.emilio.isEating ? 'active' : ''}`}>{ this.state.kibbleEaten } / { this.state.totalKibble }</div>\n        <div className=\"emiliocanvas\"></div>\n      </div>\n    );\n  }\n}\n\n\nexport default Test;\n","import React from 'react';\nimport Test from './Test';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Test />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}