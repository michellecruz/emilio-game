{"version":3,"sources":["Test.js","App.js","index.js"],"names":["camera","scene","renderer","geometry","texture","textureOpen","material","mesh","geometryKibble","textureKibble","materialKibble","meshKibble","geometryKibble2","textureKibble2","materialKibble2","meshKibble2","count","Test","state","kibbleEaten","isEating","init","THREE","window","innerWidth","innerHeight","position","set","background","load","map","x","y","z","rotation","needsUpdate","kibble","add","antialias","setPixelRatio","devicePixelRatio","setSize","refs","canvas","appendChild","domElement","document","querySelector","transparent","animate","requestAnimationFrame","render","eatKibble","sphereOne","sphereTwo","spheresIntersect","boundingSphere","setState","emilioEating","console","log","layers","mask","visible","scale","classList","setTimeout","contains","remove","changePosition","sphere1","sphere1position","sphere2","sphere2position","v1","v2","dx","dy","Math","sqrt","distanceVector","radius","this","addEventListener","e","keyCode","className","ref","Component","App","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0310e7d5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as THREE from 'three';\n\nlet camera, scene, renderer;\nlet geometry, texture, textureOpen, material, mesh;\nlet geometryKibble, textureKibble, materialKibble, meshKibble;\nlet geometryKibble2, textureKibble2, materialKibble2, meshKibble2;\nlet count, emilioEats;\n\nclass Test extends Component {\n  state = {\n    kibbleEaten: 0,\n    isEating: false,\n  }\n\n  init = () => {\n    camera = new THREE.PerspectiveCamera( 1.8, window.innerWidth / window.innerHeight, 1, 1000 );\n    camera.position.set( 0, 8, 1000 );\n  \n    scene = new THREE.Scene();\n    scene.background = new THREE.Color( 0xffffff );\n\n    geometry = new THREE.SphereBufferGeometry( 4.5, 32, 32 );\n    texture = new THREE.TextureLoader().load( 'img/milio3.jpg' );\n    textureOpen = new THREE.TextureLoader().load( 'img/milio3-open.jpg' );\n    material = new THREE.MeshBasicMaterial( { map: texture } );\n\n    mesh = new THREE.Mesh( geometry, material );\n\n    mesh.position.x = -32\n    mesh.position.y = 26\n    mesh.position.z = 1\n\n    mesh.rotation.x = 0.2;\n    mesh.rotation.y = 6.6;\n    mesh.rotation.z = 5;\n    mesh.material.map.needsUpdate = true;\n  \n    this.kibble();\n    scene.add( mesh );\n\n    renderer = new THREE.WebGLRenderer( { antialias: true } );\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize( window.innerWidth, window.innerHeight );  \n    this.refs.canvas.appendChild( renderer.domElement );\n\n    count = document.querySelector('.count');\n  }\n\n  kibble = () => {\n    geometryKibble = new THREE.SphereBufferGeometry( 2, 32, 32 );\n    textureKibble = new THREE.TextureLoader().load( 'img/kibble.png' );\n    materialKibble = new THREE.MeshBasicMaterial( { map: textureKibble, transparent: true } );\n    meshKibble = new THREE.Mesh( geometryKibble, materialKibble );\n    meshKibble.rotation.y = 10\n    meshKibble.position.x = 15\n    meshKibble.position.y = 10\n    meshKibble.position.z = 8\n    scene.add( meshKibble );\n\n\n    geometryKibble2 = new THREE.SphereBufferGeometry( 2, 32, 32 );\n    textureKibble2 = new THREE.TextureLoader().load( 'img/kibble.png' );\n    materialKibble2 = new THREE.MeshBasicMaterial( { map: textureKibble2, transparent: true } );\n    meshKibble2 = new THREE.Mesh( geometryKibble2, materialKibble2 );\n    meshKibble2.rotation.y = 10\n    meshKibble2.position.x = 85\n    meshKibble2.position.y = 16\n    meshKibble2.position.z = 8\n    scene.add( meshKibble2 );\n  }\n\n  animate = () => {\n    requestAnimationFrame( this.animate );\n\n    mesh.position.x += 0.2;\n\n    if (mesh.position.y > 0) {\n      mesh.position.y -= 0.2;\n      mesh.position.x += 0.5;\n\n      if (mesh.position.x < 0) {\n        mesh.rotation.z -= 0.05 * -mesh.position.y;\n      } else {\n        mesh.rotation.z -= 0.01 * -mesh.position.y;\n      }\n    } else {\n      mesh.material.map = texture;\n      mesh.rotation.z -= 0.05\n    }\n\n    if (mesh.position.x > 0) {\n      camera.position.x = mesh.position.x;\n    }\n\n    renderer.render( scene, camera );\n\n    this.eatKibble(meshKibble2, mesh);\n    this.eatKibble(meshKibble, mesh);\n  }\n\n  eatKibble = (sphereOne, sphereTwo) => {\n    emilioEats = this.spheresIntersect(\n      sphereOne.geometry.boundingSphere,\n      sphereOne.position,\n      sphereTwo.geometry.boundingSphere,\n      sphereTwo.position,\n    );\n\n    if (emilioEats) {\n      this.setState({\n        isEating: true\n      })\n    } else {\n      this.setState({\n        isEating: false\n      })\n    }\n\n    this.emilioEating(sphereOne, sphereTwo);\n  }\n\n  emilioEating = (sphereOne, sphereTwo) => {\n\n    console.log(sphereOne.layers.mask)\n    if (this.state.isEating) {\n      sphereOne.visible = false;\n      sphereTwo.scale.set(sphereTwo.scale.x + 0.01, sphereTwo.scale.y + 0.01, sphereTwo.scale.z + 0.01);\n      sphereTwo.rotation.z = -1.5;\n\n      this.setState({\n        kibbleEaten: this.state.kibbleEaten+1,\n      })\n\n      count.classList.add('active');\n\n      requestAnimationFrame( \n        function(){if (sphereTwo.material.map === texture) {\n          setTimeout(function(){\n            sphereTwo.material.map = textureOpen\n          }, 50);\n        } else  {\n          setTimeout(function(){\n            sphereTwo.material.map = texture\n          }, 50);\n        }\n      });\n    } else {\n      if (count.classList.contains('active')) {\n        count.classList.remove('active');\n      }\n    }\n  }\n\n  changePosition = () => {\n    mesh.position.x += 0.001;\n    mesh.position.y += 4;\n    \n    if (mesh.position.x > 0) {\n      camera.position.x += 0.001;\n    }\n\n    if (mesh.position.y > 0) {\n      mesh.position.y += 2 * -(mesh.position.y * 0.01);\n    }\n\n    mesh.material.map = textureOpen;\n  }\n\n  spheresIntersect = (sphere1, sphere1position, sphere2, sphere2position) => {\n    function distanceVector( v1, v2 ) {\n        var dx = v1.x - v2.x;\n        var dy = v1.y - v2.y;\n\n        return Math.sqrt( dx * dx + dy * dy );\n    }\n    return distanceVector(sphere1position, sphere2position) <= (sphere1.radius + sphere2.radius)\n  }\n\n  componentDidMount() {\n    this.init();\n    this.animate();\n\n    document.addEventListener(\"keydown\", e =>\n      e.keyCode === 32 ?\n      requestAnimationFrame(this.changePosition) : null\n    );\n\n    window.addEventListener(\"touchstart\", this.changePosition);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"count\">{ this.state.kibbleEaten }</div>\n        <div ref=\"canvas\"></div>\n      </div>\n    );\n  }\n}\n\nexport default Test;\n","import React from 'react';\nimport Test from './Test';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Test />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}